{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f4af70f4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:12.369642Z",
     "iopub.status.busy": "2024-09-23T04:42:12.369058Z",
     "iopub.status.idle": "2024-09-23T04:42:13.387908Z",
     "shell.execute_reply": "2024-09-23T04:42:13.386535Z"
    },
    "papermill": {
     "duration": 1.029004,
     "end_time": "2024-09-23T04:42:13.390998",
     "exception": false,
     "start_time": "2024-09-23T04:42:12.361994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/home-value-insights/house_price_regression_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "83f2d3c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:13.402942Z",
     "iopub.status.busy": "2024-09-23T04:42:13.402326Z",
     "iopub.status.idle": "2024-09-23T04:42:13.426777Z",
     "shell.execute_reply": "2024-09-23T04:42:13.425387Z"
    },
    "papermill": {
     "duration": 0.033776,
     "end_time": "2024-09-23T04:42:13.429772",
     "exception": false,
     "start_time": "2024-09-23T04:42:13.395996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv('/kaggle/input/home-value-insights/house_price_regression_dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa7931ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:13.441568Z",
     "iopub.status.busy": "2024-09-23T04:42:13.441029Z",
     "iopub.status.idle": "2024-09-23T04:42:13.470483Z",
     "shell.execute_reply": "2024-09-23T04:42:13.469141Z"
    },
    "papermill": {
     "duration": 0.038802,
     "end_time": "2024-09-23T04:42:13.473452",
     "exception": false,
     "start_time": "2024-09-23T04:42:13.434650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Square_Footage</th>\n",
       "      <th>Num_Bedrooms</th>\n",
       "      <th>Num_Bathrooms</th>\n",
       "      <th>Year_Built</th>\n",
       "      <th>Lot_Size</th>\n",
       "      <th>Garage_Size</th>\n",
       "      <th>Neighborhood_Quality</th>\n",
       "      <th>House_Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1360</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1981</td>\n",
       "      <td>0.599637</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>262382.852274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4272</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2016</td>\n",
       "      <td>4.753014</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>985260.854490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3592</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2016</td>\n",
       "      <td>3.634823</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>777977.390119</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Square_Footage  Num_Bedrooms  Num_Bathrooms  Year_Built  Lot_Size  \\\n",
       "0            1360             2              1        1981  0.599637   \n",
       "1            4272             3              3        2016  4.753014   \n",
       "2            3592             1              2        2016  3.634823   \n",
       "\n",
       "   Garage_Size  Neighborhood_Quality    House_Price  \n",
       "0            0                     5  262382.852274  \n",
       "1            1                     6  985260.854490  \n",
       "2            0                     9  777977.390119  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "196d5700",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:13.485085Z",
     "iopub.status.busy": "2024-09-23T04:42:13.484633Z",
     "iopub.status.idle": "2024-09-23T04:42:13.496091Z",
     "shell.execute_reply": "2024-09-23T04:42:13.494727Z"
    },
    "papermill": {
     "duration": 0.020339,
     "end_time": "2024-09-23T04:42:13.498680",
     "exception": false,
     "start_time": "2024-09-23T04:42:13.478341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x=df.drop('House_Price',axis=1)\n",
    "y=df['House_Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b0ab306a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:13.510367Z",
     "iopub.status.busy": "2024-09-23T04:42:13.509872Z",
     "iopub.status.idle": "2024-09-23T04:42:15.210661Z",
     "shell.execute_reply": "2024-09-23T04:42:15.209078Z"
    },
    "papermill": {
     "duration": 1.710861,
     "end_time": "2024-09-23T04:42:15.214456",
     "exception": false,
     "start_time": "2024-09-23T04:42:13.503595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(x,y,random_state=10,test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f26b32a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:15.230606Z",
     "iopub.status.busy": "2024-09-23T04:42:15.229622Z",
     "iopub.status.idle": "2024-09-23T04:42:15.438994Z",
     "shell.execute_reply": "2024-09-23T04:42:15.437655Z"
    },
    "papermill": {
     "duration": 0.22097,
     "end_time": "2024-09-23T04:42:15.442264",
     "exception": false,
     "start_time": "2024-09-23T04:42:15.221294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "reg=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2489e172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:15.457151Z",
     "iopub.status.busy": "2024-09-23T04:42:15.455947Z",
     "iopub.status.idle": "2024-09-23T04:42:15.492776Z",
     "shell.execute_reply": "2024-09-23T04:42:15.491310Z"
    },
    "papermill": {
     "duration": 0.047057,
     "end_time": "2024-09-23T04:42:15.495654",
     "exception": false,
     "start_time": "2024-09-23T04:42:15.448597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "33c921d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:15.508753Z",
     "iopub.status.busy": "2024-09-23T04:42:15.507520Z",
     "iopub.status.idle": "2024-09-23T04:42:15.521513Z",
     "shell.execute_reply": "2024-09-23T04:42:15.520082Z"
    },
    "papermill": {
     "duration": 0.023646,
     "end_time": "2024-09-23T04:42:15.524428",
     "exception": false,
     "start_time": "2024-09-23T04:42:15.500782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9982167382708265"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "39f4e0b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T04:42:15.537943Z",
     "iopub.status.busy": "2024-09-23T04:42:15.537365Z",
     "iopub.status.idle": "2024-09-23T04:42:15.545313Z",
     "shell.execute_reply": "2024-09-23T04:42:15.543796Z"
    },
    "papermill": {
     "duration": 0.01793,
     "end_time": "2024-09-23T04:42:15.548200",
     "exception": false,
     "start_time": "2024-09-23T04:42:15.530270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "with open(\"HousePrice_Modelv2\",'wb') as file:\n",
    "    pickle.dump(reg,file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "191931ad",
   "metadata": {
    "papermill": {
     "duration": 0.004835,
     "end_time": "2024-09-23T04:42:15.558376",
     "exception": false,
     "start_time": "2024-09-23T04:42:15.553541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5656167,
     "sourceId": 9334344,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.634239,
   "end_time": "2024-09-23T04:42:16.287730",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-23T04:42:08.653491",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
